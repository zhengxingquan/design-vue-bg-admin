package ${package}.${pkgName}.controller;

import com.quan.core.annotation.SLog;
import com.quan.core.common.annotation.AutoCreateMenuAuth;
import com.quan.core.common.enume.MenuType;
import com.quan.core.common.web.JsonResult;
import com.quan.core.common.web.Result;
import ${package}.${pkgName}.service.${className}Service;
import ${package}.${pkgName}.request.create.${className}CreateRequest;
import ${package}.${pkgName}.request.update.${className}UpdateRequest;
import ${package}.${pkgName}.request.del.${className}BatchDeleteRequest;
import ${package}.${pkgName}.request.del.${className}DeleteRequest;
import ${package}.${pkgName}.request.${className}PageQueryRequest;
import ${package}.${pkgName}.request.${className}QueryRequest;
import ${package}.${pkgName}.request.${className}FindOneByIdRequest;
import ${package}.${pkgName}.request.${className}EnableRequest;
import ${package}.${pkgName}.request.${className}DisableRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.access.prepost.PreAuthorize;

import java.util.List;

/**
 * ${comments}
 *
 * @author ${author}
 * @email  ${email}
 * @date   ${datetime}
 */
@RestController
@RequestMapping("${requestUrlPrefix}")
@Api(tags = "${comments}")
@AutoCreateMenuAuth(type = MenuType.MENU, name = "${comments}", permission = "${permissionNamePrefix}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @ApiOperation(value = "查询列表")
    @PostMapping("/list")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:list')")
    @SLog(module = "${classname}-center", tag = "查询列表")
    public Object data(@RequestBody ${className}PageQueryRequest req) {
        return ${classname}Service.findAll(req);
    }


    /**
     * 保存
     */
    @ApiOperation(value = "添加数据")
    @PostMapping("/save")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:save')")
    @AutoCreateMenuAuth(name = "新建", shortNo = 1, permission = "${permissionNamePrefix}:save", parentPermission = "${permissionNamePrefix}")
    @SLog(module = "${classname}-center", tag = "添加数据")
    public Result doSave(@RequestBody ${className}CreateRequest req) {
            ${classname}Service.save(req);
        return JsonResult.succeed("保存成功");
    }

    /**
    * 批量添加数据
    */
    @ApiOperation(value = "批量添加数据")
    @PostMapping("/batchSave")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:save')")
    @AutoCreateMenuAuth(name = "新建", shortNo = 1, permission = "${permissionNamePrefix}:save", parentPermission = "${permissionNamePrefix}")
    @SLog(module = "${classname}-center", tag = "批量添加数据")
    public Result doBatchSaveSave(@RequestBody List<${className}CreateRequest> req) {
            ${classname}Service.batchSave(req);
        return JsonResult.succeed("保存成功");
    }

    /**
     * 修改
     */
    @ApiOperation(value = "编辑数据")
    @PostMapping("/update")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:update')")
    @AutoCreateMenuAuth(name = "编辑", shortNo = 2, permission = "${permissionNamePrefix}:update", parentPermission = "${permissionNamePrefix}")
    @SLog(module = "${classname}-center", tag = "编辑数据")
    public Result doUpdate(@RequestBody ${className}UpdateRequest req) {
            ${classname}Service.update(req);
        return JsonResult.succeed("修改成功");
    }

    /**
     * 删除
     */
    @ApiOperation(value = "删除数据")
    @PostMapping("/delete")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:delete')")
    @AutoCreateMenuAuth(name = "删除", shortNo = 3, permission = "${permissionNamePrefix}:delete", parentPermission = "${permissionNamePrefix}")
    @SLog(module = "${classname}-center", tag = "编辑数据")
    public Result doDelete(@RequestBody ${className}DeleteRequest req) {
        return JsonResult.succeed(${classname}Service.delete(req.getId()), "删除成功");
    }

    /**
    * 批量删除
    */
    @ApiOperation(value = "删除数据")
    @PostMapping("/deletes")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:delete')")
    @AutoCreateMenuAuth(name = "删除", shortNo = 4, permission = "${permissionNamePrefix}:delete", parentPermission = "${permissionNamePrefix}")
    @SLog(module = "${classname}-center", tag = "批量编辑数据")
    public Result doDeletes(@RequestBody ${className}BatchDeleteRequest req) {
        return JsonResult.succeed(${classname}Service.delete(req.getIds()), "删除成功");
    }


    /**
     * 查找记录
     */
    @ApiOperation(value = "查找记录（通过主键）")
    @PostMapping("/findById")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:list')")
    @SLog(module = "${classname}-center", tag = "通过主键查找记录")
    public Result doFindById(@RequestBody ${className}FindOneByIdRequest req) {
        return JsonResult.succeed(${classname}Service.findOneById(req.getId()));
    }


    /**
     * 通过条件查找记录
     * @param req 对象数据
     * @return
     */
    @ApiOperation(value = "查找记录")
    @PostMapping("/findByCnd")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:list')")
    @SLog(module = "${classname}-center", tag = "通过条件查找记录")
    public Result doFindOneByCnd(@RequestBody ${className}QueryRequest req) {
        return JsonResult.succeed(${classname}Service.findOneByCnd(req));
    }

    /**
     * 查找记录
     */
    @ApiOperation(value = "查找数据不分页")
    @PostMapping("/query")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:list')")
    @SLog(module = "${classname}-center", tag = "通过条件查找记录")
    public Result data(@RequestBody ${className}QueryRequest req) {
        return JsonResult.succeed(${classname}Service.list(req));
    }


    /**
    * 启用
    */
    @ApiOperation(value = "启用")
    @PostMapping("/enable")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:enable')")
    @SLog(module = "${classname}-center", tag = "启用")
    public Result doEnable(@RequestBody ${className}EnableRequest req) {
        return JsonResult.succeed(${classname}Service.enable(req));
    }


    /**
    * 禁用
    */
    @ApiOperation(value = "禁用")
    @PostMapping("/disable")
    @PreAuthorize("hasAnyAuthority('${permissionNamePrefix}:disable')")
    @SLog(module = "${classname}-center", tag = "禁用")
    public Result doDisable(@RequestBody ${className}DisableRequest req) {
        return JsonResult.succeed(${classname}Service.disable(req));
    }




}
