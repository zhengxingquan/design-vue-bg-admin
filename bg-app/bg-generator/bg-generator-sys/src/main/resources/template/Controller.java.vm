package ${package}.${pkgName}.controller;

import java.util.Map;

import com.quan.common.web.PageResult;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.access.prepost.PreAuthorize;
import ${package}.${pkgName}.model.${className};
import ${package}.${pkgName}.service.${className}Service;

import com.quan.common.web.Result;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags = "${comments}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @ApiOperation(value = "查找列表")
    @ApiImplicitParams({
        #foreach ($column in $columns)
                @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = false, dataType = "$column.attrType"),
        #end
            @ApiImplicitParam(name = "pageNumber", value = "起始页码", required = true, dataType = "int"),
            @ApiImplicitParam(name = "pageSize", value = "每页显示数量", required = true, dataType = "int")
    })
    @RequestMapping("/list")
    @PreAuthorize("hasAnyAuthority('${tableName}:${pathName}:list')")
    public PageResult list(${className}PageQueryRequest ${classname}PageQueryData) {
        PageResult pageResult = ${classname}Service.findAll(${classname}PageQueryData);
        return pageResult;
    }


    /**
     * 保存
     */
    @ApiOperation(value = "添加数据")
    @ApiImplicitParams({
        #foreach ($column in $columns)
            #if($column.columnName == $pk.columnName)
            #end
                @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = false, dataType = "$column.attrType"),
        #end
    })
    @RequestMapping("/save")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:save')")
    public Result save(@RequestBody ${className}CreateRequest ${classname}CreateData) {
            ${classname}Service.save(${classname}CreateData);

        return Result.succeed("保存成功");
    }

    /**
     * 修改
     */
    @ApiOperation(value = "编辑数据")
    @ApiImplicitParams({
        #foreach ($column in $columns)
            #if($column.columnName == $pk.columnName)
                    @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = true, dataType = "$column.attrType"),
            #end
                @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = false, dataType = "$column.attrType"),
        #end
    })
    @PostMapping("/update")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:update')")
    public Result update(@RequestBody ${className}UpdateRequest ${classname}UpdateData) {
            ${classname}Service.update(${classname}UpdateData);

        return Result.succeed("修改成功");
    }

    /**
     * 删除
     */
    @ApiOperation(value = "删除数据")
    @RequestMapping("/delete/{id}")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:delete')")
    public Result delete(@PathVariable Long  ${pk.attrname}) {
            ${classname}Service.delete(${pk.attrname});
        return Result.succeed("删除成功");
    }


    /**
     * 查找记录
     */
    @ApiOperation(value = "查找记录（通过主键）")
    @RequestMapping("/findById/{id}")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:findById')")
    public Result delete(@PathVariable Long  ${pk.attrname}) {
            ${classname}Service.findById(${pk.attrname});
        return Result.succeed("删除成功");
    }

    /**
     * 查找记录
     */
    @ApiOperation(value = "查找数据不分页")
    @ApiImplicitParams({
        #foreach ($column in $columns)
                @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = false, dataType = "$column.attrType"),
        #end
    })
    @RequestMapping("/query")
    @PreAuthorize("hasAnyAuthority('${tableName}:${pathName}:query')")
    public Result delete(${className}QueryRequest ${classname}QueryData) {
            ${classname}Service.query(${classname}QueryData);
        return Result.succeed("删除成功");
    }


}
