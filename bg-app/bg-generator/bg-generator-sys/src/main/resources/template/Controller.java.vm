package ${package}.${pkgName}.controller;

import com.quan.common.web.PageResult;
import com.quan.common.web.Result;
import ${package}.${pkgName}.service.${className}Service;
import ${package}.${pkgName}.request.create.${className}CreateRequest;
import ${package}.${pkgName}.request.update.${className}UpdateRequest;
import ${package}.${pkgName}.request.del.${className}BatchDeleteRequest;
import ${package}.${pkgName}.request.del.${className}DeleteRequest;
import ${package}.${pkgName}.request.${className}PageQueryRequest;
import ${package}.${pkgName}.request.${className}QueryRequest;
import ${package}.${pkgName}.request.${className}FindOneByIdRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.access.prepost.PreAuthorize;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags = "${comments}")
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classname}Service;


    /**
     * 列表
     */
    @ApiOperation(value = "查找列表")
##    @ApiImplicitParams({
##        #foreach ($column in $columns)
##                @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = false, dataType = "$column.attrType"),
##        #end
##            @ApiImplicitParam(name = "pageNumber", value = "起始页码", required = true, dataType = "int"),
##            @ApiImplicitParam(name = "pageSize", value = "每页显示数量", required = true, dataType = "int")
##    })
    @PostMapping("/list")
    @PreAuthorize("hasAnyAuthority('${tableName}:${pathName}:list')")
    public PageResult list(${className}PageQueryRequest req) {
        PageResult pageResult = ${classname}Service.findAll(req);
        return pageResult;
    }


    /**
     * 保存
     */
    @ApiOperation(value = "添加数据")
    @PostMapping("/save")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:save')")
    public Result save(@RequestBody ${className}CreateRequest req) {
            ${classname}Service.save(req);
        return Result.succeed("保存成功");
    }

    /**
     * 修改
     */
    @ApiOperation(value = "编辑数据")
    @PostMapping("/update")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:update')")
    public Result update(@RequestBody ${className}UpdateRequest req) {
            ${classname}Service.update(req);
        return Result.succeed("修改成功");
    }

    /**
     * 删除
     */
    @ApiOperation(value = "删除数据")
    @PostMapping("/delete")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:delete')")
    public Result delete(@RequestBody ${className}DeleteRequest req) {
        return Result.succeed(${classname}Service.delete(req.getId()), "删除成功");
    }

    /**
  * 批量删除
  */
    @ApiOperation(value = "删除数据")
    @PostMapping("/deletes")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:delete')")
    public Result deletes(@RequestBody ${className}BatchDeleteRequest req) {
        return Result.succeed(${classname}Service.delete(req.getIds()), "删除成功");
    }


    /**
     * 查找记录
     */
    @ApiOperation(value = "查找记录（通过主键）")
    @PostMapping("/findById")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:findById')")
    public Result findById(@RequestBody ${className}FindOneByIdRequest req) {
        return Result.succeed(${classname}Service.findOneById(req.getId()));
    }


    /**
     * 通过条件查找记录
     * @param req 对象数据
     * @return
     */
    @ApiOperation(value = "查找记录（通过主键）")
##    @ApiImplicitParams({
##        #foreach ($column in $columns)
##            #if($column.reqIgnore == false)
##            @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", dataType = "$column.attrType"),
##            #end
##        #end
##    })
    @PostMapping("/findByCnd")
    @PreAuthorize("hasAnyAuthority('generator:sysroleuser:findByCnd')")
    public Result findOneByCnd(@RequestBody ${className}QueryRequest req) {
        return Result.succeed(${classname}Service.findOneByCnd(req));
    }

    /**
     * 查找记录
     */
    @ApiOperation(value = "查找数据不分页")
##    @ApiImplicitParams({
##        #foreach ($column in $columns)
##            #if($column.reqIgnore == false)
##            @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", dataType = "$column.attrType"),
##            #end
##        #end
##    })
    @PostMapping("/query")
    @PreAuthorize("hasAnyAuthority('${tableName}:${pathName}:query')")
    public Result data(${className}QueryRequest req) {
        return Result.succeed(${classname}Service.list(req));
    }


}
