package ${package}.${pkgName}.service.impl;

import com.quan.common.annotation.PageQuery;
import com.quan.common.web.PageResult;
import ${package}.${pkgName}.dto.${className}DTO;
import ${package}.${pkgName}.model.${className};
import ${package}.${pkgName}.factory.${className}Factory;
import ${package}.${pkgName}.dao.${className}Dao;
import ${package}.${pkgName}.service.${className}Service;
import ${package}.${pkgName}.request.${className}PageQueryRequest;
import ${package}.${pkgName}.request.${className}QueryRequest;
import ${package}.${pkgName}.request.create.${className}CreateRequest;
import ${package}.${pkgName}.request.update.${className}UpdateRequest;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.apache.commons.collections4.CollectionUtils;

import java.util.Collections;
import java.util.List;


@Service
public class ${className}ServiceImpl implements ${className}Service {

    @Autowired
    private ${className}Dao ${classname}Dao;

    /**
     * 添加
     *
     * @param data
     */
    @Transactional
    @Override
    public int save(${className}CreateRequest data) {
        return ${classname}Dao.save(${className}Factory.newInstance(data));
    }

    /**
     * 批量添加
     *
     * @param ${classname}s
     */
    @Transactional
    @Override
    public int batchSave(List<${className}CreateRequest> ${classname}s) {
        return ${classname}Dao.save(${className}Factory.newBatchInstance(${classname}s));
    }

    /**
     * 修改
     * @param ${classname}
     */
    @Transactional
    @Override
    public int update(${className}UpdateRequest ${classname}) {
        return ${classname}Dao.update(${className}Factory.newInstance(${classname}));
    }

    /**
     * 单条删除
     * @param id
     */
    @Transactional
    @Override
    public int delete(Long id) {
        return ${classname}Dao.delete(id);
    }

    /**
       * 批量删除
       *
       * @param id
       */
    @Transactional
    @Override
    public int delete(List<Long> id) {
        if (CollectionUtils.isEmpty(id)) {
            return 0;
        }
        return ${classname}Dao.batchDelete(id);
    }

    /**
    * 通过ID查找记录
    * @param id 用户记录ID
    * @return
    */
    @Override
    public  ${className}DTO findOneById(Long id) {
        ${className} data = ${classname}Dao.findOneById(id);
        if (data == null) {
            return null;
        }
        return ${className}Factory.newInstance(data);
    }


    /**
     * 通过条件查找记录
     * @param ${classname} 对象数据
     * @return
     */
    @Override
    public ${className}DTO findOneByCnd(${className}QueryRequest ${classname}) {
        ${className} data = ${classname}Dao.findOneByCnd(${className}Factory.newInstance(${classname}));
        if (data == null) {
            return null;
        }
        return ${className}Factory.newInstance(data);
    }


    /**
     * 查询列表分页
     * @param params 对象查询
     * @return
     */
    @Override
    @PageQuery
    public Object findAll(${className}PageQueryRequest params) {
        return ${classname}Dao.findAll(${className}Factory.newInstance(params));
    }


    /**
     * 查询列表不分页
     * @param params 对象查询
     * @return
     */
    @Override
    public List<${className}DTO> list(${className}QueryRequest params) {
        List<${className}> list = ${classname}Dao.list(${className}Factory.newInstance(params));
        if (CollectionUtils.isEmpty(list)) {
            return Collections.emptyList();
        }
        return ${className}Factory.newInstance(list);
    }

}
