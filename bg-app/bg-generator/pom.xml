<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>bg-app</artifactId>
        <groupId>com.quan</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>bg-generator</artifactId>
    <packaging>pom</packaging>

    <description>代码生成器中心</description>

    <modules>
        <!-- 系统表生成 -->
        <module>bg-generator-sys</module>
        <module>bg-generator-center</module>
    </modules>


    <dependencies>

        <!-- 关系型数据库配置 -->
        <dependency>
            <groupId>com.quan</groupId>
            <artifactId>bg-db-spring-boot-starter</artifactId>
        </dependency>

        <!-- 非关系型数据库配置 -->
        <dependency>
            <groupId>com.quan</groupId>
            <artifactId>bg-redis-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>com.quan</groupId>
            <artifactId>bg-log-spring-boot-starter</artifactId>
        </dependency>

        <!-- 公共实体配置 -->
        <dependency>
            <groupId>com.quan</groupId>
            <artifactId>bg-base-spring-boot-starter</artifactId>
        </dependency>

        <!-- 资源服务器配置 -->
        <dependency>
            <groupId>com.quan</groupId>
            <artifactId>bg-oauth-client-spring-boot-starter</artifactId>
        </dependency>

        <!-- swagger -->
        <dependency>
            <groupId>com.quan</groupId>
            <artifactId>bg-swagger-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>


        <dependency>
            <artifactId>velocity</artifactId>
            <groupId>org.apache.velocity</groupId>
            <version>1.7</version>
        </dependency>


        <!-- 选用eureka时打开-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

    </dependencies>

    <!-- 形成带第三方jar包的可执行jar包，jar包目录结构如下 application.properties lib META-INF mybatis
        org -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!-- 首先加入pom ${docker.image.prefix} ： 这个是你的dockerhub注册上面的名字 gitgeek 这个是我注册的
                ${project.artifactId} ： 项目的名称 dockerDirectory ： dockerfile的文件路径 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                    <dockerDirectory>src/main/docker</dockerDirectory>
                    <!-- docker远程服务器地址 -->
                    <dockerHost>${docker.host}</dockerHost>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>

        </plugins>
        <finalName>${project.artifactId}</finalName>

        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <!-- 是否替换资源中的属性-->
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>

    </build>

</project>