package ${package}.${pkgName}.factory;

import com.quan.core.constant.uid.IUidGenerator;
import ${package}.${pkgName}.dto.*;
import ${package}.${pkgName}.model.${className};
import ${package}.${pkgName}.request.*;

import org.apache.commons.collections4.CollectionUtils;
import java.util.*;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
public final class ${className}Factory {


    /***
     *   新建转换类
     * @author ${author}
     * @date ${datetime}
     * @param uidGenerator 分布式ID生成类
     * @param req 前端请求数据
     * @return CreateDTO
     */
    public static ${className}CreateDTO newInstance(IUidGenerator uidGenerator, ${className}CreateRequest req) {
        ${className}CreateDTO data = new ${className}CreateDTO();
        data.setId(uidGenerator.uid());
        #foreach ($column in $columns)
        #if($column.reqIgnore == false && $column.columnName != $pk.columnName)
            data.set${column.attrName}(req.get${column.attrName}());
        #end
        #end
        data.setCreateTime(new Date());
        data.setCreateUserId(0L);
        data.setHasChildren(0);
        return createData;
    }

    /***
     *  编辑类转换
     * @author ${author}
     * @date ${datetime}
     * @param req  前端请求数据

     * @return UpdateDTO
     */
    public static ${className}UpdateDTO newInstance(${className}UpdateRequest req) {
        ${className}UpdateDTO data = new ${className}UpdateDTO();
        #foreach ($column in $columns)
        #if($column.reqIgnore == false)
            data.set${column.attrName}(req.get${column.attrName}());
        #end
        #end
        data.setUpdateTime(new Date());
        data.setUpdateUserId(0L);
        return updateData;
    }

    /***
     * 批量 新建
     * @author ${author}
     * @date ${datetime}
     * @param uidGenerator 分布式ID生成类
     * @param dataAll
     * @return java.util.List<CreateDTO>
     */
    public static List<${className}CreateDTO> newBatchInstance(IUidGenerator uidGenerator, List<${className}CreateRequest> dataAll) {

        if (CollectionUtils.isEmpty(dataAll)) {
            return Collections.emptyList();
        }
        return dataAll.stream().map(d -> newInstance(uidGenerator, d)).collect(Collectors.toList());
    }

    /***
     * 转换查询列表 req 到 DTO
     * @author ${author}
     * @date ${datetime}
     * @param req 前端请求类
    
     * @return QueryDTO  
     */  
    public static ${className}QueryDTO newInstance(${className}QueryRequest req) {
        ${className}QueryDTO queryData = new ${className}QueryDTO();

        return queryData;
    }
    
    /***
     * 转换分页 req 到 DTO
     * @author ${author}
     * @date ${datetime}
     * @param req 前端请求类
    
     * @return PageQueryDTO  
     */  
    public static ${className}PageQueryDTO newInstance(${className}PageQueryRequest req) {
        ${className}PageQueryDTO query = new ${className}PageQueryDTO();
        query.setPageNumber(req.getPageNumber());
        query.setPageSize(req.getPageSize());

        return query;
    }

    /***
     * 转换 PO 到 DTO
     * @author ${author}
     * @date ${datetime}
     * @param 
    
     * @return DTO  
     */  
    public static ${className}DTO newInstance(${className} data) {
        ${className}DTO dto = new ${className}DTO();
        #foreach ($column in $columns)
        #if($column.dtoIgnore == false)
        dto.set${column.attrName}(data.get${column.attrName}());
        #end
        #end

        return dto;
    }

    /***
     * 批量转换 PO 到 DTO
     * @author ${author}
     * @date ${datetime}
     * @param

     * @return DTO
     */
    public static List<${className}DTO> newInstance(List<${className}> data) {
        return data.stream().map(${className}Factory::newInstance).collect(Collectors.toList());
    }

}
