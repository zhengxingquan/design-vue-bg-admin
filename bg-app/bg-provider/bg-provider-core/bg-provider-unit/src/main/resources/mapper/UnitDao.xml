<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.quan.core.dao.UnitDao">

    <!-- 通用查询映射结果  -->
    <resultMap type="com.quan.core.model.Unit" id="BaseResultMap">

        <result property="id" column="id"/>
        <result property="parentId" column="parent_id"/>
        <result property="name" column="name"/>
        <result property="aliasName" column="alias_name"/>
        <result property="unitCode" column="unit_code"/>
        <result property="path" column="path"/>
        <result property="field1" column="field1"/>
        <result property="field2" column="field2"/>
        <result property="field3" column="field3"/>
        <result property="note" column="note"/>
        <result property="sort" column="sort"/>
        <result property="hasChildren" column="has_children"/>
        <result property="createTime" column="create_time"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="updateTime" column="update_time"/>
        <result property="updateUserId" column="update_user_id"/>
        <result property="dataState" column="data_state"/>

    </resultMap>

    <sql id="baseColumnList">
                `id` as id
        ,            `parent_id` as parentId
        ,            `name` as name
        ,            `alias_name` as aliasName
        ,            `unit_code` as unitCode
        ,            `path` as path
        ,            `field1` as field1
        ,            `field2` as field2
        ,            `field3` as field3
        ,            `note` as note
        ,            `sort` as sort
        ,            `has_children` as hasChildren
        ,            `create_time` as createTime
        ,            `create_user_id` as createUserId
        ,            `update_time` as updateTime
        ,            `update_user_id` as updateUserId
        ,            `data_state` as dataState
                </sql>

    <sql id="BaseWhere">
        WHERE data_state = 0
    </sql>


    <sql id="where">
        <where>
            <if test="data.id != null">
                AND t.`id` = #{data.id}
            </if>
            <if test="data.parent_id != null">
                AND t.`parent_id` = #{data.parentId}
            </if>
            <if test="data.name != null">
                AND t.`name` LIKE concat('%',#{data.name}, '%')
            </if>
            <if test="data.alias_name != null">
                AND t.`alias_name` LIKE concat('%',#{data.aliasName}, '%')
            </if>
            <if test="data.unit_code != null">
                AND t.`unit_code` LIKE concat('%',#{data.unitCode}, '%')
            </if>
            <if test="data.path != null">
                AND t.`path` LIKE concat('%',#{data.path}, '%')
            </if>
            <if test="data.field1 != null">
                AND t.`field1` LIKE concat('%',#{data.field1}, '%')
            </if>
            <if test="data.field2 != null">
                AND t.`field2` LIKE concat('%',#{data.field2}, '%')
            </if>
            <if test="data.field3 != null">
                AND t.`field3` LIKE concat('%',#{data.field3}, '%')
            </if>
            <if test="data.note != null">
                AND t.`note` LIKE concat('%',#{data.note}, '%')
            </if>
            <if test="data.sort != null">
                AND t.`sort` = #{data.sort}
            </if>
            <if test="data.has_children != null">
                AND t.`has_children` = #{data.hasChildren}
            </if>
        </where>
    </sql>


    <insert id="save">
        insert into sys_unit(
         `id`,
         `parent_id`,
         `name`,
         `alias_name`,
         `unit_code`,
         `path`,
         `field1`,
         `field2`,
         `field3`,
         `note`,
         `sort`,
         `has_children`,
         `create_time`,
         `create_user_id`
         ) values (
         #{id},
         #{parentId},
         #{name},
         #{aliasName},
         #{unitCode},
         #{path},
         #{field1},
         #{field2},
         #{field3},
         #{note},
         #{sort},
         #{hasChildren},
         #{createTime},
          #{createUserId}
          )
        </insert>


    <insert id="batchSave">
        insert into sys_unit(
        `id`
        , `parent_id`
        , `name`
        , `alias_name`
        , `unit_code`
        , `path`
        , `field1`
        , `field2`
        , `field3`
        , `note`
        , `sort`
        , `has_children`
        , `create_time`
        , `create_user_id`
        ) values
        <foreach collection="java.util.List" item="item" separator=",">
            (
            #{item.id}
            , #{item.parentId}
            , #{item.name}
            , #{item.aliasName}
            , #{item.unitCode}
            , #{item.path}
            , #{item.field1}
            , #{item.field2}
            , #{item.field3}
            , #{item.note}
            , #{item.sort}
            , #{item.hasChildren}
            , #{item.createTime}
            , #{item.createUserId}
            )
        </foreach>

    </insert>


    <update id="update">
        UPDATE sys_unit
        <set>
            <if test="id != null">
                `id` = #{id}
                ,
            </if>
            <if test="parentId != null">
                `parent_id` = #{parentId}
                ,
            </if>
            <if test="name != null">
                `name` = #{name}
                ,
            </if>
            <if test="aliasName != null">
                `alias_name` = #{aliasName}
                ,
            </if>
            <if test="unitCode != null">
                `unit_code` = #{unitCode}
                ,
            </if>
            <if test="path != null">
                `path` = #{path}
                ,
            </if>
            <if test="field1 != null">
                `field1` = #{field1}
                ,
            </if>
            <if test="field2 != null">
                `field2` = #{field2}
                ,
            </if>
            <if test="field3 != null">
                `field3` = #{field3}
                ,
            </if>
            <if test="note != null">
                `note` = #{note}
                ,
            </if>
            <if test="sort != null">
                `sort` = #{sort}
                ,
            </if>
            <if test="hasChildren != null">
                `has_children` = #{hasChildren}
                ,
            </if>
            <if test="updateTime != null">
                `update_time` = #{updateTime}
                ,
            </if>
            <if test="updateUserId != null">
                `update_user_id` = #{updateUserId}
                ,
            </if>
        </set>
        <include refid="BaseWhere"/>
        AND id = #{id}
    </update>


    <update id="updateParentNodeAttrChildren">
        UPDATE sys_unit
        <set>
            `has_children` = #{data.hasChildren}
        </set>
        <include refid="BaseWhere"/>
        AND id = #{data.value}
    </update>


    <select id="existsChildrenNodeByParentId">
        SELECT COUNT(1)
        FROM sys_unit
        <include refid="BaseWhere"/>
        AND parent_id = #{data.value}
    </select>

    <delete id="deleteDataByPath">
        UPDATE sys_unit SET data_state = 2
        <include refid="BaseWhere"/>
        AND ${data.queryColName} LIKE concat(#{data.value}, '%')
    </delete>


    <select id="hasChildren" resultType="java.lang.Integer">
        SELECT COUNT(1)
        FROM sys_unit
        <include refid="BaseWhere"/>
        AND parent_id = #{data.value}
    </select>

    <select id="getParentPath" resultType="java.lang.String">
        SELECT `${data.queryColName}`
        FROM sys_unit
        <include refid="BaseWhere"/>
        AND id = #{data.patentId}
    </select>


    <select id="getPath" resultType="java.lang.String">
        SELECT ${data.queryColName}
        FROM sys_unit
        <include refid="BaseWhere"/>
        AND ${data.queryColName} LIKE concat(#{data.value}, '____')
        ORDER BY `${data.queryColName}` DESC
        LIMIT 0,1
    </select>

    <select id="getSort" resultType="java.lang.Integer">
        SELECT IFNULL(MAX(`${data.queryColName}`),0)+1
        FROM sys_unit
        <include refid="BaseWhere"/>
        <if test="data.value != null and data.value != ''">
            AND parent_id = #{data.value}
        </if>
        <if test="data.value == null and data.value == ''">
            AND (parent_id IS NULL OR parent_id = '')
        </if>

    </select>


    <delete id="delete" parameterType="java.lang.Long" flushCache="true">
        UPDATE sys_unit SET data_state = 2
        <include refid="BaseWhere"/>
        AND id = #{id}
    </delete>


    <delete id="batchDelete" parameterType="java.util.List" flushCache="true">

        UPDATE sys_unit SET data_state = 2
        <include refid="BaseWhere"/>
        AND id IN
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>


    <select id="findOneById" parameterType="java.lang.Long" resultType="com.quan.core.model.Unit">
        SELECT
        <include refid="baseColumnList"/>
        FROM sys_unit
        <include refid="BaseWhere"/>
        AND id = #{id}
    </select>


    <select id="findOneByCnd" parameterType="java.lang.Long" resultType="com.quan.core.model.Unit">
        SELECT
        <include refid="baseColumnList"/>
        FROM sys_unit
        <include refid="BaseWhere"/>
        <include refid="where"/>
    </select>


    <select id="findAll" resultType="com.quan.core.model.Unit">
        SELECT
        <include refid="baseColumnList"/>
        FROM sys_unit t
        <include refid="BaseWhere"/>
        <include refid="where"/>
    </select>


    <select id="list" resultType="com.quan.core.model.Unit">
        SELECT
        <include refid="baseColumnList"/>
        FROM sys_unit t
        <include refid="BaseWhere"/>
        <include refid="where"/>
    </select>


</mapper>