<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quan.core.dao.SysClientDao">


    <sql id="baseColumnList">
        `id` as id ,
        `client_id` as clientId,
        `client_secret` as clientSecret,
        `client_secret_str` as clientSecretStr ,
        `resource_ids` as `resourceIds`,
        `scope` as scope ,
        `authorized_grant_types` as authorizedGrantTypes ,
        `access_token_validity` as accessTokenValidity,
        `refresh_token_validity` as refreshTokenValidity ,
        `web_server_redirect_uri`  as webServerRedirectUri ,
        `additional_information` as additionalInformation ,
        `authorities` as authorities,
        `if_limit` as ifLimit ,
        `limit_count` as limitCount,
        `autoapprove` as autoapprove,
        `data_state` as dataState
    </sql>

    <sql id="TableName">
        oauth_client_details
    </sql>

    <sql id="BaseWhere">
        data_state != 1
    </sql>

    <update id="updateByPrimaryKey">
        update
        <include refid="TableName"/>
        <set>
            <if test="clientId != null and clientId != ''">
                client_id = #{clientId,jdbcType=VARCHAR},
            </if>
            <if test="clientSecret != null and clientSecret != ''">
                client_secret = #{clientSecret,jdbcType=VARCHAR},
            </if>
            <if test="clientSecretStr != null and clientSecretStr != ''">
                client_secret_str = #{clientSecretStr,jdbcType=VARCHAR},
            </if>

            <if test="webServerRedirectUri != null and webServerRedirectUri != ''">
                web_server_redirect_uri = #{webServerRedirectUri,jdbcType=VARCHAR},
            </if>

            <if test="authorizedGrantTypes != null and authorizedGrantTypes != ''">
                authorized_grant_types = #{authorizedGrantTypes,jdbcType=VARCHAR},
            </if>
            <if test="ifLimit != null">
                if_limit = #{ifLimit,jdbcType=INTEGER},
            </if>

            <if test="limitCount != null">
                limit_count = #{limitCount,jdbcType=BIGINT},
            </if>
        </set>
        <include refid="BaseWhere"/>
        AND id = #{id,jdbcType=BIGINT}
    </update>

    <sql id="where">
        <where>
            <if test="params.clientId!= null and params.clientId != ''">
                and client_id = #{params.clientId}
            </if>
            <if test="params.resourceIds != null and params.resourceIds != ''">
                and resource_ids = #{params.resourceIds}
            </if>
            <if test="params.clientSecret != null and params.clientSecret != ''">
                and client_secret = #{params.clientSecret}
            </if>
            <if test="params.scope != null and params.scope != ''">
                and scope = #{params.scope}
            </if>
            <if test="params.authorizedGrantTypes != null and params.authorizedGrantTypes != ''">
                and authorized_grant_types = #{params.authorizedGrantTypes}
            </if>
            <if test="params.webServerRedirectUri != null and params.webServerRedirectUri != ''">
                and web_server_redirect_uri = #{params.webServerRedirectUri}
            </if>
            <if test="params.authorities != null and params.authorities != ''">
                and authorities = #{params.authorities}
            </if>
            <if test="params.accessTokenValidity != null and params.accessTokenValidity != ''">
                and access_token_validity = #{params.accessTokenValidity}
            </if>
            <if test="params.refreshTokenValidity != null and params.refreshTokenValidity != ''">
                and refresh_token_validity = #{params.refreshTokenValidity}
            </if>
            <if test="params.additionalInformation != null and params.additionalInformation != ''">
                and additional_information = #{params.additionalInformation}
            </if>
            <if test="params.autoapprove != null and params.autoapprove != ''">
                and autoapprove = #{params.autoapprove}
            </if>

            <if test="params.searchKey != null and params.searchKey != ''">
                and client_id like concat('%', #{params.searchKey}, '%')
            </if>

        </where>
    </sql>

    <insert id="save" parameterType="com.quan.core.dto.client.AuthClientCreateDTO">
        INSERT INTO
        <include refid="TableName"/>
        (
        id,
        client_id,
        resource_ids,
        client_secret,
        client_secret_str,
        scope,
        authorized_grant_types,
        web_server_redirect_uri,
        authorities,
        access_token_validity,
        refresh_token_validity,
        additional_information,
        autoapprove,
        if_limit ,
        limit_count,
        create_time,
        create_user_id,
        )values(
        #{id},
        #{clientId},
        #{resourceIds},
        #{clientSecret},
        #{clientSecretStr},
        #{scope},
        #{authorizedGrantTypes},
        #{webServerRedirectUri},
        #{authorities},
        #{accessTokenValidity},
        #{refreshTokenValidity},
        #{additionalInformation},
        #{autoapprove} ,
        #{ifLimit} ,
        #{limitCount}
        #{createTime}
        #{createUserId}
        )

    </insert>


    <select id="count" resultType="int">
        select
        COUNT(1)
        from
        <include refid="TableName"/>
        <include refid="BaseWhere"/>
        <include refid="where"/>
    </select>

    <select id="findList" resultType="com.quan.core.constant.model.SysClient">
        select
        <include refid="baseColumnList"/>
        from
        <include refid="TableName"/>
        <include refid="BaseWhere"/>
        <include refid="where"/>
        <!--<if test="params.page != null and params.page != ''  and params.limit != null and params.limit != '' ">-->
        <!--limit #{params.page},#{params.limit}-->
        <!--</if>-->
    </select>


    <!-- 查询数据 -->
    <select id="data" resultType="com.quan.core.constant.model.SysClient">

        select
        <include refid="baseColumnList"/>
        from
        <include refid="TableName"/>
        <include refid="BaseWhere"/>
        <include refid="where"/>
    </select>


    <!-- 查询数据 -->
    <select id="getById" resultType="com.quan.core.constant.model.SysClient">

        select
        <include refid="baseColumnList"/>
        from
        <include refid="TableName"/>
        <include refid="BaseWhere"/>
        AND id = #{id}
    </select>

    <!-- 查询数据 -->
    <select id="getClient" resultType="com.quan.core.constant.model.SysClient">

        select
        <include refid="baseColumnList"/>
        from
        <include refid="TableName"/>
        <include refid="BaseWhere"/>
        AND client_id = #{clientId}
    </select>

    <!-- 删除 -->
    <update id="delete" parameterType="long" flushCache="true">

        UPDATE
        <include refid="TableName"/>
        SET data_state = 1
        <include refid="BaseWhere"/>
        AND id = #{id}
    </update>

    <!-- 删除 -->
    <update id="batchDelete" parameterType="long" flushCache="true">

        UPDATE
        <include refid="TableName"/>
        SET data_state = 1
        <include refid="BaseWhere"/>
        AND id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>


    <!-- 批量启用 -->
    <update id="enable" parameterType="long" flushCache="true">

        UPDATE
        <include refid="TableName"/>
        SET data_state = 0
        <include refid="BaseWhere"/>
        AND id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <!-- 批量禁用 -->
    <update id="disable" parameterType="long" flushCache="true">

        UPDATE
        <include refid="TableName"/>
        SET data_state = -1
        <include refid="BaseWhere"/>
        AND id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>


    <!-- 查询所有的数据 -->
    <update id="findAllByIds" parameterType="long" flushCache="true">

        select
        <include refid="baseColumnList"/>
        from
        <include refid="TableName"/>
        <include refid="BaseWhere"/>
        AND id IN
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>


</mapper>